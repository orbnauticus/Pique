#!/usr/bin/env python

import sys
import optparse

import mcp.library

def abort(*message):
	parser.print_usage()
	if message:
		print ' '.join(map(str,message))
	exit(1)

parser = optparse.OptionParser(usage = '''%prog COMMAND [ARGS]
where COMMAND is one of:\n
   add      Add files to the database
   select   Search database by regular expression
   init     Recreate database (destructively)
   help     Show info on commands
   list     List members of categories in the database
   update   Edit metadata of library entries''',
version="%prog " + mcp.VERSION)

def get_input():
	if not sys.stdin.isatty():
		for line in sys.stdin:
			yield line[:-1]

def parse(usage, opt_group=None):
	if help:
		abort()
	else:
		parser.add_option('-v', '--verbose', action="count",
		  help="Show extra information")
		parser.add_option('--lib-path', metavar='PATH',
		  help="Use database found at PATH.")
		parser.set_defaults(lib_path=mcp.library.DEFAULT_PATH)
		if opt_group is not None:
			parser.add_option_group(opt_group)
		parser.usage = usage
		input = get_input()
		options, args = parser.parse_args()
		lib = mcp.library.library(options.lib_path)
		return lib, input, options, args[1:]

def init(l, input, options, args):
	l.init()

def select(l, input, options, args):
	kwargs = dict((k,getattr(options,k)) for k in mcp.library.columns if hasattr(options, k) and getattr(options,k) is not None)
	for uri in input:
		print uri
	for uri in l.select_uris(**kwargs):
		print uri

def add(l, input, options, args):
	kwargs = dict((k,getattr(options,k)) for k in mcp.library.columns if hasattr(options, k) and getattr(options,k) is not None)
	l.add(args, **kwargs)

def list(l, input, options, args):
	if not len(args):
		abort('Need a category')
	elif args[0] not in mcp.library.columns:
		abort('Invalid category name')
	for row in l.members(args[0]):
		if row is not None:
			print row
		
def update(l, input, options, args):
	kwargs = dict((k,getattr(options,k)) for k in mcp.library.columns if hasattr(options, k) and getattr(options,k) is not None)
	for uri in input:
		l.update(uri, **kwargs)

def nocmd():
	abort('Error: unrecognized command', repr(cmd))

if __name__=='__main__':
	args = sys.argv[1:]
	cmd = args.pop(0)
	if cmd == 'help':
		help = True
		cmd = args.pop(0)
	else:
		help = False
	
	if cmd == 'init':
		init_usage = '''%prog init\n
Creates a new empty database, deleting all the old contents. There are
no options or arguments associated with this command.'''
		init(*parse(init_usage))
	elif cmd == 'select':
		select_options = optparse.OptionGroup(parser, 'Select Options')
		select_options.add_option('--uri', help="Match uri's with regex URI")
		select_options.add_option('--album', help="Match albums by regex ALBUM")
		select_options.add_option('--artist', help="Match artists by regex ARTIST")
		select_usage = '''%prog select [OPTIONS]\n
Prints uris from the library, one per line, and possibly filtered
to match all options given (logical AND). Uris passed in on standard
input are prepended.'''
		select(*parse(select_usage, select_options))
	elif cmd == 'add':
		add_usage = '''%prog add URI | PATH [URI | PATH] [...]\n
Adds URIs or PATHs to the library.'''
		add(*parse(add_usage))
	elif cmd == 'list':
		list_usage = '''%%prog list CATEGORY\n
Lists all members of CATEGORY in the database. CATEGORY must be one of:
%s.''' % ', '.join(mcp.library.columns)
		list(*parse(list_usage))
	elif cmd == 'update':
		update_options = optparse.OptionGroup(parser, 'Update Options')
		update_options.add_option('--artist', help="Set artist to ARTIST")
		update_options.add_option('--album', help="Set album to ALBUM")
		update_usage = '''%prog update [OPTIONS]\n
Reads uris from standard input and sets their metadata according to 
OPTIONS.'''
		update(*parse(update_usage, update_options))
	else:
		nocmd()
