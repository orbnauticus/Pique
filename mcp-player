#!/usr/bin/env python

import sys, os
import pygtk, gtk, gobject
import pygst
pygst.require('0.10')
import gst

Element = gst.element_factory_make
def Bin(*elements):
	#elements = [e if not isinstance(e,str) else Element(e) for e in elements]
	bin = gst.Bin()
	if len(elements):
		bin.add(*elements)
		if len(elements)-1:
			gst.element_link_many(*elements)
		for t,d,i in (('sinks',gst.PAD_SINK,0),('srcs',gst.PAD_SRC,-1)):
			j = 0
			for pad in elements[i].pads():
				if pad.props.direction == d:
					bin.add_pad(gst.GhostPad(t[:-1] + str(j), pad))
					j+=1
	return bin
	
class MediaButtons(gtk.HButtonBox):
	def __init__(self):
		gtk.HButtonBox.__init__(self)
		self.play = gtk.Button(stock=gtk.STOCK_MEDIA_PLAY)
		self.pack_start(self.play, False)
		self.pause = gtk.Button(stock=gtk.STOCK_MEDIA_PAUSE)
		self.pack_start(self.pause, False)
		self.stop = gtk.Button(stock=gtk.STOCK_MEDIA_STOP)
		self.pack_start(self.stop, False)
		
	def connect(self, which, func, *extra):
		if which == 'play':
			self.play.connect('clicked', func, *extra)
		elif which == 'pause':
			self.pause.connect('clicked', func, *extra)
		elif which == 'stop':
			self.stop.connect('clicked', func, *extra)
		else:
			gtk.HButtonBox.connect(self, which, func, *extra)

class Main(object):
	def __init__(self, files):
		self.lib = library.library(library.DEFAULT_PATH)

		self.win = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.win.set_title('Video-Player')
		self.win.set_default_size(500, 400)
		self.win.connect('destroy', self.on_destroy, 'WM destroy')
		vbox = gtk.VBox()
		self.win.add(vbox)
		
		hbox = gtk.HBox()
		
		buttons = MediaButtons()
		buttons.connect('play', self.play)
		buttons.connect('pause', self.pause)
		buttons.connect('stop', self.stop)
		
		vbox.pack_start(hbox, False)
		hbox.add(buttons)
		
		self.movie_window = gtk.DrawingArea()
		vbox.add(self.movie_window)
		self.win.show_all()

		self.player = gst.element_factory_make('playbin2', 'player')
		self.player.connect('about-to-finish', self.on_about_to_finish)

		self.taginject = Element('taginject')
		audio_bin = Bin(self.taginject, Element('rgvolume'), Element('gconfaudiosink'))
		self.player.set_property('audio-sink', audio_bin)
		
		video_sink = Element('xvimagesink')
		video_sink.set_xwindow_id(self.movie_window.window.xid)
		video_sink.set_property('force-aspect-ratio', True)
		self.player.set_property('video-sink', video_sink)

		self.player.set_property('vis-plugin', Element('goom2k1'))
		
		self.playlist = iter(files)

		bus = self.player.get_bus()
		bus.add_signal_watch()
		bus.enable_sync_message_emission()
		bus.connect('message::eos', self.on_eos)
		bus.connect('message::error', self.on_error)
		
		self.on_about_to_finish(self.player)
		self.play()

	def start_stop(self, w=None):
		if self.button.get_label() == 'Start':
			filepath = self.entry.get_text()
			if os.path.isfile(filepath):
				self.button.set_label("Stop")
				self.player.set_property('uri', 'file://' + filepath)
				self.player.set_state('playing')
		else:
			self.player.set_state('null')
			self.button.set_label('Start')
			
	def play(self, *args):
		self.player.set_state('playing')
		
	def pause(self, *args):
		self.player.set_state('paused')
		
	def stop(self, *args):
		self.player.set_state('null')
		
	def next(self):
		try:
			tags = self.lib[index]._asdict()
			taginject.props.tags = 'replaygain-reference-level=%s,replaygain-track-gain=%s,replaygain-track-peak=%s' % (tags['reference_level'], tags['gain'], tags['peak'])
			self.player.set_property('uri', self.playlist.next())
		except StopIteration:
			self.stop()
		
	def on_about_to_finish(self, player):
		self.next()
			
	def on_eos(self, bus, message):
		self.stop()
		
	def on_error(self, bus, message):
		self.player.set_state('null')
		err, debug = message.parse_error()
		print "Error: %s" % err, debug
		self.button.set_label("Start")
		
	def on_destroy(self, *args):
		self.player.set_state('null')
		gtk.main_quit()

	#def on_sync_message(self, bus, message):
		#print 'on_sync_message', message
		#if message.structure and \
		 #message.structure.get_name() == 'prepare-xwindow-id':
			#message.src.set_property('force-aspect-ratio', True)
			#gtk.gdk.threads_enter()
			#print self.movie_window.window.xid
			#message.src.set_xwindow_id(self.movie_window.window.xid)
			#gtk.gdk.threads_leave()

if __name__=='__main__':
	import optparse
	import library
	
	parser = optparse.OptionParser(usage="%prog [songlist ...]", version="%prog 0:01")
	
	l = library.library(library.DEFAULT_PATH)
	p = []

	def my_callback(option, opt_str, value, parser):
		c = l.db.cursor()
		c.execute('select uri from media where %s=? order by artist,album,track_number' % opt_str[2:], (value,))
		for u in c:
			print u[0]
			p.append(u[0])

	parser.add_option('--album',
	callback=my_callback, action="callback", type="string",
	help="Include all songs in ALBUM in the playlist")
	parser.add_option('--artist',
	callback=my_callback, action="callback", type="string",
	help="Include all songs by ARTIST in the playlist")
	parser.add_option('--genre',
	callback=my_callback, action="callback", type="string",
	help="Include all songs in GENRE in the playlist")
	
	sys.argv = ['mcp-library','--album','None']

	options, args = parser.parse_args()

	for a in args:
		p.append(a)

	m = Main(p)
	gtk.gdk.threads_init()
	gtk.main()
