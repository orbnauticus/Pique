#!/usr/bin/env python

DEBUG = True
TIME_FORMAT = 'hms'
def debug(*args):
	if DEBUG:
		print ' '.join(map(str,args))

import os
import signal
import sys
import threading
import time

import pygtk, gtk, gobject
import pygst
pygst.require('0.10')
import gst

Element = gst.element_factory_make
def Bin(*elements):
	#elements = [e if not isinstance(e,str) else Element(e) for e in elements]
	bin = gst.Bin()
	if len(elements):
		bin.add(*elements)
		if len(elements)-1:
			gst.element_link_many(*elements)
		for t,d,i in (('sinks',gst.PAD_SINK,0),('srcs',gst.PAD_SRC,-1)):
			j = 0
			for pad in elements[i].pads():
				if pad.props.direction == d:
					bin.add_pad(gst.GhostPad(t[:-1] + str(j), pad))
					j+=1
	return bin
	
class IOThread(threading.Thread):
	def __init__(self, main):
		threading.Thread.__init__(self)
		self.daemon = True
		self.main = main
		
class PlayThread(threading.Thread):
	def __init__(self, main):
		threading.Thread.__init__(self)
		self.daemon = True
		self.main = main
		
	def run(self):
		while True:
			self.main.update()
			time.sleep(1)
		
class MediaButtons(gtk.VBox):
	def __init__(self):
		gtk.VBox.__init__(self)
		self.toolbar = gtk.Toolbar()
		self.toolbar.set_orientation(gtk.ORIENTATION_HORIZONTAL)
		self.toolbar.set_show_arrow(False)
		
		self.widgets = {}
		for name,stock in (
			 ('play',gtk.STOCK_MEDIA_PLAY),
			 ('pause', gtk.STOCK_MEDIA_PAUSE),
			 ('stop',gtk.STOCK_MEDIA_STOP),
			 ('previous',gtk.STOCK_MEDIA_PREVIOUS),
			 ('next',gtk.STOCK_MEDIA_NEXT),):
			self.widgets[name] = gtk.ToolButton(stock)
			self.toolbar.insert(self.widgets[name], -1)
		
		self.position = gtk.Adjustment(step_incr=15*gst.SECOND,page_incr=60*gst.SECOND)
		self.pos = gtk.ToolItem()
		self.pos.set_expand(True)
		self.slider = gtk.HScale(self.position)
		#self.slider.set_update_policy(gtk.UPDATE_CONTINUOUS)
		self.slider.connect('format-value', self.format_time)
		self.pos.add(self.slider)
		self.toolbar.insert(self.pos, -1)
		
		self.widgets['fullscreen'] = gtk.ToggleToolButton(gtk.STOCK_FULLSCREEN)
		self.toolbar.insert(self.widgets['fullscreen'], -1)
		
		self.pack_start(self.toolbar, expand=True, fill=True)
		
	def connect(self, which, func, *extra):
		if which in ('play','pause','stop','previous','next','fullscreen'):
			self.widgets[which].connect('clicked', func, *extra)
		elif which == 'position':
			self.slider.connect('change-value', func, *extra)
		else:
			gtk.VBox.connect(self, which, func, *extra)
			
	def format_time(self, w, v):
		pos, dur = self.position.get_value(), self.position.get_upper()
		if TIME_FORMAT == 'percent':
			return "%2d%%" % (100 * pos / dur)
		elif TIME_FORMAT == 'hms':
			m,s = divmod(pos/gst.SECOND, 60)
			h,m = divmod(m,60)
			dm,ds = divmod(dur/gst.SECOND, 60)
			dh,dm = divmod(dm,60)
			return "%01d:%02d:%02d / %01d:%02d:%02d" % (h,m,s,dh,dm,ds)
			
	def set_duration(self, dur):
		self.position.set_upper(float(dur))
		
	def set_position(self, pos):
		self.position.set_value(pos)

class Main(object):
	def __init__(self, files):
		self.lib = library.library(library.DEFAULT_PATH)

		self.win = gtk.Window(gtk.WINDOW_TOPLEVEL)
		self.win.set_title('Video-Player')
		self.win.set_default_size(500, 400)
		self.win.connect('destroy', self.on_destroy)
		vbox = gtk.VBox()
		self.win.add(vbox)
		
		self.buttons = MediaButtons()
		self.buttons.connect('play', lambda b:self.play())
		self.buttons.connect('pause', lambda b:self.pause())
		self.buttons.connect('stop', lambda b:self.stop())
		self.buttons.connect('next', lambda b:self.next())
		self.buttons.connect('previous', lambda b:self.previous())
		self.buttons.connect('position', lambda a,t,v:self.seek(v, absolute=True, percent=False))
		self.buttons.connect('fullscreen', lambda b:self.fullscreen() if b.get_active() else self.unfullscreen())
		
		self.movie_window = gtk.DrawingArea()
		self.movie_window.modify_bg(gtk.STATE_NORMAL, gtk.gdk.Color(0,0,0))
		self.movie_window.connect('button-release-event', lambda w,e:(sys.stdout.write(str(e)),sys.stdout.flush()))
		#self.movie_window.connect('button-press-event', lambda w,e:(not self.show_controls()))
		vbox.pack_start(self.movie_window, True, True)
		vbox.pack_start(self.buttons, False, False)
		self.win.show_all()

		self.player = gst.element_factory_make('playbin2', 'player')
		self.player.connect('about-to-finish', self.on_about_to_finish)

		self.taginject = Element('taginject')
		audio_bin = Bin(self.taginject, Element('rgvolume'), Element('gconfaudiosink'))
		self.player.set_property('audio-sink', audio_bin)
		
		video_sink = Element('xvimagesink')
		self.movie_window.connect('expose-event', self.on_expose_event, video_sink)
		#video_sink.set_xwindow_id(self.movie_window.window.xid)
		video_sink.set_property('force-aspect-ratio', True)
		self.player.set_property('video-sink', video_sink)
		self.player.set_property('vis-plugin', Element('goom2k1'))
		
		self.playlist = iter(files)

		bus = self.player.get_bus()
		bus.add_signal_watch()
		bus.enable_sync_message_emission()
		bus.connect('message::eos', self.on_eos)
		bus.connect('message::error', self.on_error)
		#bus.connect('message::tag', self.on_tag)
		
		IOThread(self).start()
		PlayThread(self).start()
		
		self.on_about_to_finish(self.player)
		self.play()
		
		signal.signal(signal.SIGINT, lambda s,f: self.quit())
		
	def seek(self, new, absolute=True, percent=False):
		debug('seek', new, absolute, percent)
		format = gst.FORMAT_TIME if absolute else gst.FORMAT_PERCENT
		if absolute:
			self.player.seek_simple(format, gst.SEEK_FLAG_FLUSH, new)
		else:
			self.player.seek_simple(gst.FORMAT_PERCENT, gst.SEEK_FLAG_FLUSH, 
			 self.get_position(percent=percent) + new)
		
	def play(self):
		debug('play')
		self.player.set_state('playing')
		
	def pause(self):
		debug('pause')
		self.player.set_state('paused')
		
	def stop(self):
		debug('stop')
		self.player.set_state('null')
		
	def show_controls(self):
		debug('show controls')
		self.buttons.show()
		
	def hide_controls(self):
		self.buttons.hide()
		
	def fullscreen(self):
		self.win.fullscreen()
		self.hide_controls()
		
	def unfullscreen(self):
		self.win.unfullscreen()
		self.show_controls()
		
	def get_position(self, percent=False):
		return self.player.query_position(gst.FORMAT_PERCENT if percent else gst.FORMAT_TIME)[0]
		
	def get_duration(self):
		return self.player.query_duration(gst.FORMAT_TIME)[0]
		
	def previous(self):
		debug('previous')
		self.stop()
		if self.get_position() < 3 * gst.SECOND:
			try:
				self.load(self.playlist.previous())
			except StopIteration:
				pass
		self.play()
		
	def next(self):
		debug('next')
		self.stop()
		try:
			self.load(self.playlist.next())
		except StopIteration:
			pass
		self.play()
			
	def load(self, uri):
		debug('load', uri)
		index = self.lib.index(uri)
		tags = self.lib[index]._asdict()
		self.player.set_property('uri', uri)
		self.player.get_property('video_sink').set_xwindow_id(self.movie_window.window.xid)
		self.taginject.props.tags = 'replaygain-reference-level=%s,replaygain-track-gain=%s,replaygain-track-peak=%s' % (tags['reference_level'], tags['gain'], tags['peak'])
		
	def quit(self):
		self.player.set_state('null')
		gtk.main_quit()
		
	def update(self):
		try:
			sys.stdout.write('.')
			sys.stdout.flush()
			p = self.get_position()
			self.buttons.set_position(p)
			d = self.get_duration()
			self.buttons.set_duration(d)
			self.buttons.slider.queue_draw()
		finally:
			return True
		
	def on_about_to_finish(self, player):
		try:
			self.load(self.playlist.next())
		except StopIteration:
			pass
			
	def on_expose_event(self, window, event, sink):
		print window.window.xid
		sink.set_xwindow_id(window.window.xid)
		
	def on_tag(self, bus, message):
		for k in message.structure.keys():
			print k, '=', message.structure[k]
		
	def on_eos(self, bus, message):
		self.stop()
		
	def on_error(self, bus, message):
		self.stop()
		err, debug = message.parse_error()
		print "Error: %s" % err, debug
		
	def on_message(self, bus, message):
		if message.type != gst.MESSAGE_STATE_CHANGED:
			pass
			#print message
		
	def on_destroy(self, *args):
		self.quit()

if __name__=='__main__':
	import optparse
	import library
	
	parser = optparse.OptionParser(usage="%prog [songlist ...]", version="%prog 0:01")
	
	l = library.library(library.DEFAULT_PATH)
	p = []

	def my_callback(option, opt_str, value, parser):
		c = l.db.cursor()
		c.execute('select uri from media where %s=? order by artist,album,track_number' % opt_str[2:], (value,))
		for u in c:
			print u[0]
			p.append(u[0])

	parser.add_option('--album',
	callback=my_callback, action="callback", type="string",
	help="Include all songs in ALBUM in the playlist")
	parser.add_option('--artist',
	callback=my_callback, action="callback", type="string",
	help="Include all songs by ARTIST in the playlist")
	parser.add_option('--genre',
	callback=my_callback, action="callback", type="string",
	help="Include all songs in GENRE in the playlist")
	
	sys.argv = ['mcp-library'] + \
	['file:///home/ryan/Videos/Family Guy/%s' % f for f in os.listdir('/home/ryan/Videos/Family Guy')]

	options, args = parser.parse_args()

	for a in args:
		p.append(library.uri(a))

	Main(p)
	gtk.gdk.threads_init()
	gtk.main()
	print
