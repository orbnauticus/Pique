#!/usr/bin/python

import traceback
import xmlrpclib
from mcp.client import client
import sys
import os
import readline

VERBOSE=False

class format_output(str):
	indent = []
	white = '    '
	def __new__(self, data):
		res = ''
		if data is None:
			res = 'None'
		elif isinstance(data, list):
			if len(data) == 0:
				res = '[]'
			elif len(data) == 1:
				res = '[%s]' % format_output(data[0])
			else:
				self.indent.append(self.white)
				res = '\n'.join(['%s%s,' % (''.join(self.indent), format_output(e)) for e in data])
				self.indent.pop()
				res = '[\n%s\n%s]' % (res,''.join(self.indent))
		elif isinstance(data, dict):
			if len(data) == 0:
				res = '{}'
			elif len(data) == 1:
				k,v = data.items()[0]
				res = '{%s: %s}' % (format_output(k),format_output(v))
			else:
				self.indent.append(self.white)
				res = '\n'.join(['%s%s: %s,' % (''.join(self.indent), format_output(k), format_output(v)) for k,v in data.iteritems()])
				self.indent.pop()
				res = '{\n%s\n%s}' % (res,''.join(self.indent))
		elif isinstance(data, xmlrpclib.DateTime):
			res = '%s-%s-%s' % (data.value[0:4], data.value[4:6], data.value[6:8])
		elif isinstance(data, xmlrpclib.Binary):
			res = '<Binary Data of length %i>' % len(data.data)
		else:
			res = repr(data)
		return res

c = client(verbose=VERBOSE)

if len(sys.argv) == 1: #No arguments
	if sys.stdin.isatty():
		prompt = '>>> client.'
		histfile = os.path.join(os.environ["HOME"], ".mcp_history")
		try:
			readline.read_history_file(histfile)
		except IOError:
			pass
		import atexit
		atexit.register(readline.write_history_file, histfile)
	else:
		prompt = ''
	while True:
		try:
			cmd = raw_input(prompt)
			if cmd:
				output = format_output(eval('c.' + cmd))
				if output == 'None':
					pass
				else:
					print output
		except KeyboardInterrupt:
			print
			continue
		except EOFError:
			if sys.stdin.isatty():
				print
				print 'Quit'
			break
		except xmlrpclib.Fault, fault:
			if fault.faultCode != 1:
				print fault.faultCode
			print fault.faultString
		except xmlrpclib.ProtocolError, pe:
			print pe
			print pe.errcode
			print pe.errmsg
			print pe.headers
			print pe.url
		except:
			traceback.print_exc()
	print
else:
	try:
		if len(sys.argv) == 2: #Includes a command
			if sys.argv[1] == 'play':
				c.play()
			elif sys.argv[1] == 'pause':
				c.pause()
			elif sys.argv[1] == 'stop':
				c.stop()
			elif sys.argv[1] == 'pos':
				print c.pos()
		elif len(sys.argv) == 3: #Command with 1 argument
			if sys.argv[1] == 'play':
				path = 'file://' + os.path.abspath(sys.argv[2])
				c.load(path)
			elif sys.argv[1] == 'seek':
				c.seek(int(sys.argv[2]))
	except xmlrpclib.Fault, e:
		print e.faultCode
		print e.faultString
		sys.exit(1)
