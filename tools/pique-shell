#!/usr/bin/env python
#
# Copyright (c) 2010, Ryan Marquardt
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are
# met:
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the project nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from pique.client import Client
import sys

import optparse

parser = optparse.OptionParser()
parser.add_option('-H', '--host', dest='host', default='localhost',
  help='IP address of the server')

options, args = parser.parse_args()
#print options, args
import readline
import shlex

class shell(object):
	def __init__(self, prompt):
		self.prompt = prompt if sys.stdin.isatty() else ''
		
	def __iter__(self):
		try:
			while True:
				try:
					line = raw_input(self.prompt)
				except (EOFError, KeyboardInterrupt):
					break
				yield shlex.split(line, True)
		finally:
			if sys.stdin.isatty():
				print

def printformat(obj):
	if obj is None:
		return
	elif isinstance(obj, (list,tuple,set)):
		print '\n'.join(obj)
	elif isinstance(obj, basestring):
		print obj
	elif isinstance(obj, Exception):
		print '----- Remote Exception -----'
		print obj.args[0]
		print '----------------------------'
	else:
		print repr(obj)

print 'Connecting to host', options.host
serv = Client()
serv.connect(options.host)

source = (args,) if args else shell('(pique)%s: ' % options.host)

for argv in source:
	if argv:
		print 'Calling', ' '.join(argv)
		handle, result = serv.call_quick(*argv)
		printformat(result)

print 'Disconnecting'
