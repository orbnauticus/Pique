#!/usr/bin/env python
#       Redistribution and use in source and binary forms, with or without
#       modification, are permitted provided that the following conditions are
#       met:
#       
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above
#         copyright notice, this list of conditions and the following disclaimer
#         in the documentation and/or other materials provided with the
#         distribution.
#       * Neither the name of the  nor the names of its
#         contributors may be used to endorse or promote products derived from
#         this software without specific prior written permission.
#       
#       THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#       "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#       LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#       A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#       OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#       SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#       LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#       DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#       THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#       (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#       OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
import itertools
import optparse
import os
import pique.client
import re
import sys
from pique.common import *

def find(path='.'):
	return list(itertools.chain(*[find(x) if os.path.isdir(x) else (x,) for x in map(lambda x:os.path.join(path,x),os.listdir(path))]))

parser = optparse.OptionParser()
pique.client.add_default_options(parser)
parser.add_option('-f', '--format', dest='format',
  default='{artist}/{disc}.{track} {title}',
  help="Interpret metadata from each file's path according to FORMAT. By default: '{artist}/{disc}.{track} {title}'")
options,args = pique.client.parse_args(parser)

class TagFormatter(object):
	def __init__(self, f, add_ext=True):
		self.write = f.replace('{track}', '{track:02}')
		self.read = ''
		for i,s in enumerate(re.split('{(.+?)}', f)):
			if i & 1:
				s = {'disc':'(?P<%s>\\d+)', 'track':'(?P<%s>\\d+)',
				}.get(s, '(?P<%s>[^/]*?)') % s
			self.read += s
		if add_ext:
			self.write += '.{ext}'
			self.read += '\\.(?P<ext>\\w+)$'
			
	def wformat(self, **data):
		self.write.format(**data)
		
	def rformat(self, s):
		m = re.search(self.read, s)
		if m:
			return m.groupdict()
		else:
			raise Exception('No match for %r')

f = TagFormatter(options.format)
print f.read

serv = pique.client.Client()
serv.connect(options.host, options.port)

for a in args:
	for path in find(a):
		u = uri(path)
		d = f.rformat(u)
		if d is None:
			print 'FAILED:', path
			continue
		for t in ('disc', 'track'):
			if t in d:
				d[t] = int(d[t])
		repath = f.wformat(**d)
		print repath
		print serv.call_quick('import', u)
		for k,v in d.items():
			print serv.call_quick('edit', u, k, v)
