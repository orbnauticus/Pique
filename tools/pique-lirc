#!/usr/bin/env python
#
# Copyright (c) 2010, Ryan Marquardt
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are
# met:
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the project nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import shlex
import socket
from pique.client import Client

class LircConfig(object):
	def __init__(self, path, program):
		self.program = program
		lines = filter(None, [shlex(line, True) for line in open(path)])
		
		
class LircEvent(object):
	def __init__(self, rawline):
		self.code, self.repeat, self.button, self.remote = rawline.split(' ',3)
		self.repeat = int(self.repeat)
		
	def __repr__(self):
		return '%s:%s (%i)' % (self.remote, self.button, self.repeat)

class LircSocket(socket.socket):
	def __init__(self, program, sock='/dev/lircd', conf='~/.lircrc'):
		self.config = LircConfig(conf, program)
		socket.socket.__init__(self, socket.AF_UNIX, socket.SOCK_STREAM)
		self.connect(sock)
		
	def __iter__(self):
		s = self.makefile()
		for line in s:
			l = LircEvent(line)
			print l
			yield l
		
if __name__=='__main__':
	l = LircSocket()
	for command in l:
		cmd = shlex.split(command)
		result = serv.ask(*cmd)
		print result
